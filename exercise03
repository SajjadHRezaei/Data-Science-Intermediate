from sklearn.datasets import load_digits
import pandas as pd
digit=load_digits()
features=digit.feature_names
df=pd.DataFrame(data=digit.data,columns=features)
print('Number of samples: {}\nNumber of labels: {}'.format(len(df.index),len(features)))
df.describe ()

import plotly.express as px
import numpy as np
array=df.iloc[0].to_numpy().reshape((8,8))
fig=px.imshow(array, binary_string=True)
fig.show()

meanSample=[]
for i in range (10):
    data=digit.data[digit.target==i]
    meanSample.append (data.mean(axis=0).reshape(8,8))
    meanSampleArr=np.array (meanSample)

fig = px.imshow(meanSampleArr, facet_col=0, binary_string=True, facet_col_wrap=5,labels={'facet_col':'Num'})

fig.show()
data=digit.data
df_data= pd.DataFrame(data)
df_data['class']=digit.target
df_data_new=df_data.groupby(['class']).mean().to_numpy()
df_data_new

from sklearn.decomposition import PCA
from sklearn.manifold import Isomap,TSNE,MDS
import pandas as pd
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler,MinMaxScaler

random_state = 2

digit=load_digits()
X = digit.data
y = digit.target

pca = PCA(n_components=2, random_state=random_state)

isomap = Isomap(n_neighbors=10,n_components=2)

mds = MDS(n_components=2, random_state=random_state)

tsne = TSNE(n_components=2, perplexity=15,random_state=random_state)
scaler=StandardScaler()

methods=[pca,isomap,mds,tsne]
data_new=[]
for i,j in enumerate(methods):
    df_data={}

    
    df_data['class']=y
    df_data['class']=df_data['class'].astype(str)
    X_embedded=methods[i].fit_transform(scaler.fit_transform(X))
    df_data['x']=(X_embedded[:,0]-X_embedded[:,0].min())/(X_embedded[:,0].max()-X_embedded[:,0].min())
    df_data['y']=(X_embedded[:,1]-X_embedded[:,1].min())/(X_embedded[:,1].max()-X_embedded[:,1].min())
    df_data['method']=str(methods[i])
    data_new.append(df_data)
df_data

wt=pd.read_csv('weather.csv')
wt

from sklearn.decomposition import PCA
from sklearn.manifold import Isomap,TSNE,MDS
import pandas as pd
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler,MinMaxScaler

from plotly.subplots import make_subplots
import plotly.graph_objects as go

random_state = 2

wt=pd.read_csv('weather.csv')

X = wt.drop(['country'],axis=1)

y= wt.country


pca = PCA(n_components=2, random_state=random_state)

isomap = Isomap(n_neighbors=5,n_components=2)

mds = MDS(n_components=2, random_state=random_state)

tsne = TSNE(n_components=2, perplexity=5,random_state=random_state)
scaler=StandardScaler()

methods=[pca,isomap,mds,tsne]
data_new=[]
for i,j in enumerate(methods):
    df_data={}
    df_data['country']=y
    X_embedded=methods[i].fit_transform(scaler.fit_transform(X))
    df_data['x']=(X_embedded[:,0]-X_embedded[:,0].min())/(X_embedded[:,0].max()-X_embedded[:,0].min())
    df_data['y']=(X_embedded[:,1]-X_embedded[:,1].min())/(X_embedded[:,1].max()-X_embedded[:,1].min())
    data_new.append(df_data)
    
fig = make_subplots(rows=2, cols=2,subplot_titles=['model=PCA','model=isomap','model=mds','model=tsne'])
name=['PCA','Isomap','MDS','TSNE']
k=0
for i in range(2):
    for j in range(2):
        df1=pd.DataFrame(data_new[k])
        fig.add_trace(go.Scatter(x=df1['x'], y=df1['y'],mode="markers",name=str(name[k])),row=i+1, col=j+1)
        k=k+1
fig.update_layout(height=800, width=1000)
fig.show()    


from sklearn.cluster import KMeans

kmeans = KMeans(n_clusters=4, random_state=3)

wt=pd.read_csv('weather.csv')

X = wt.drop(['country'],axis=1)




X_embedded=kmeans.fit_transform(scaler.fit_transform(X))
wt['kmeans_1']=X_embedded[:,0]
wt['kmeans_2']=X_embedded[:,1]
wt['prediction']=kmeans.fit_predict(scaler.fit_transform(X))

fig = px.scatter(wt, x="kmeans_1", y="kmeans_2",color='prediction',text='country',size='avg_temp')
fig.show()